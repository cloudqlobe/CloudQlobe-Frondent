<div className="min-h-screen bg-gray-100 py-4">
  {/* ... (previous code remains the same until messages container) ... */}

  {/* Messages Container */}
  <div className="flex-1 overflow-y-auto p-2 space-y-2">
    {filteredMessages.map((msg, index) => {
      const isSent = msg.chat_from === "Marketing";
      const isSameSender = index > 0 && filteredMessages[index - 1].chat_from === msg.chat_from;

      return (
        <div
          key={index}
          className={`flex ${isSent ? "justify-end" : "justify-start"} ${
            isSameSender ? "mt-1" : "mt-3"
          }`}
        >
          <div className={`flex max-w-[80%] ${!isSent && "items-end"}`}>
            {!isSent && !isSameSender && (
              <FaUserCircle className="text-gray-400 text-2xl mr-2 flex-shrink-0" />
            )}
            {!isSent && isSameSender && <div className="w-8 mr-2"></div>}

            <div
              className={`p-3 rounded-lg ${
                isSent
                  ? "bg-green-100 rounded-br-none"
                  : "bg-gray-100 rounded-bl-none"
              } ${
                isSameSender
                  ? isSent
                    ? "rounded-tr-lg"
                    : "rounded-tl-lg"
                  : ""
              } relative`}
            >
              {!isSameSender && !isSent && (
                <div className="text-xs font-medium text-gray-700 mb-1">
                  {msg.chat_from}
                </div>
              )}
              <p className="text-gray-800">{msg.message}</p>
              {msg.reply_of_message && (
                <div className="mt-1 p-2 bg-gray-200 rounded text-xs">
                  <p className="text-gray-600">{msg.reply_of_message}</p>
                </div>
              )}
              <div className="flex items-center justify-end mt-1 space-x-2">
                <span className="text-xs text-gray-500">
                  {new Date(msg.timestamp).toLocaleTimeString([], {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </span>
                {!msg.reply_of_message && msg.chat_to === "Marketing" && (
                  <FaReply
                    className="text-gray-400 hover:text-gray-600 cursor-pointer"
                    size={12}
                    onClick={() => openReplyModal(msg)}
                  />
                )}
              </div>
              {msg.reply_of_message && msg.chat_from === "Marketing" && (
                <button
                  className="absolute -bottom-4 right-0 bg-blue-500 text-white px-2 py-1 rounded-full text-xs shadow-md hover:bg-blue-600 transition-colors"
                  onClick={() => openMessagePopup(msg)}
                >
                  View
                </button>
              )}
            </div>
          </div>
        </div>
      );
    })}
  </div>

  {/* ... (rest of the previous code remains the same) ... */}

  {/* Message View Popup */}
  {viewedMessage && (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
        <h2 className="text-xl font-semibold mb-4">Message Details</h2>
        <div className="mb-4 p-3 bg-gray-100 rounded">
          <p className="font-medium">Original Message:</p>
          <p className="mt-1">{viewedMessage.message}</p>
        </div>
        {viewedMessage.reply_of_message && (
          <div className="mb-4 p-3 bg-gray-100 rounded">
            <p className="font-medium">Your Reply:</p>
            <p className="mt-1">{viewedMessage.reply_of_message}</p>
          </div>
        )}
        <div className="flex justify-between mt-4">
          <button
            onClick={() => setViewedMessage(null)}
            className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 transition-colors"
          >
            Close
          </button>
          <button
            onClick={() => {
              setConfirmationMessage(viewedMessage);
              setViewedMessage(null);
            }}
            className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors"
          >
            Confirm
          </button>
        </div>
      </div>
    </div>
  )}

  {/* Confirmation Popup */}
  {confirmationMessage && (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-sm text-center">
        <h2 className="text-xl font-semibold mb-4">Confirm Action</h2>
        <p className="mb-6">Are you sure you want to confirm this message?</p>
        <div className="flex justify-center space-x-6">
          <button
            onClick={() => setConfirmationMessage(null)}
            className="px-5 py-2 border border-gray-300 rounded-lg hover:bg-gray-100 transition-colors flex items-center"
          >
            <FaTimes className="mr-2" /> Cancel
          </button>
          <button
            onClick={() => {
              confirmMessage();
              setConfirmationMessage(null);
            }}
            className="px-5 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors flex items-center"
          >
            <FaCheck className="mr-2" /> Confirm
          </button>
        </div>
      </div>
    </div>
  )}
</div>