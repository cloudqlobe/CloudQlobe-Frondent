import React, { useContext, useEffect, useState, useRef } from 'react';
import Layout from '../../layout/page';
import { FaReply, FaUserCircle, FaCircle, FaPlus, FaEllipsisV, FaCheck, FaCheckDouble } from 'react-icons/fa';
import axiosInstance from '../../utils/axiosinstance';
import adminContext from '../../../../../../context/page';

const ChatPanel = () => {
  const { adminDetails } = useContext(adminContext);
  const [selectedContact, setSelectedContact] = useState(null);
  const [menuOpen, setMenuOpen] = useState(false);
  const [messages, setMessages] = useState([]);
  const [contacts, setContacts] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [unreadCounts, setUnreadCounts] = useState({});
  const messagesEndRef = useRef(null);

  // Scroll to bottom of messages
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, selectedContact]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axiosInstance.get('api/member/chat/messages');
        const messagesData = response.data.chatbot_messages || [];
        setMessages(messagesData);
        processContactsAndUnreads(messagesData);
      } catch (error) {
        console.error('Error fetching messages:', error);
      }
    };
    
    fetchData();
    const interval = setInterval(fetchData, 30000);
    return () => clearInterval(interval);
  }, []);

  // ... (keep all your existing helper functions like processContactsAndUnreads, markMessagesAsRead, etc.)

  const renderMessage = (message) => {
    const isAgent = message.sender_type === 'agent';
    return (
      <div 
        key={message._id} 
        className={`flex mb-4 ${isAgent ? 'justify-end' : 'justify-start'}`}
      >
        <div className={`flex max-w-xs lg:max-w-md ${isAgent ? 'flex-row-reverse' : ''}`}>
          {!isAgent && (
            <img 
              src={`https://i.pravatar.cc/100?u=${message.customer_id}`} 
              alt={message.customer_name} 
              className="w-8 h-8 rounded-full mr-2 mt-1" 
            />
          )}
          <div>
            <div 
              className={`p-3 rounded-lg ${isAgent ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`}
            >
              <p>{message.message}</p>
            </div>
            <div className={`text-xs text-gray-500 mt-1 flex items-center ${isAgent ? 'justify-end' : 'justify-start'}`}>
              <span>{formatTime(message.sending_time)}</span>
              {isAgent && (
                <span className="ml-1">
                  {message.status === 'read' ? (
                    <FaCheckDouble className="text-blue-300 inline" />
                  ) : message.status === 'delivered' ? (
                    <FaCheckDouble className="text-gray-400 inline" />
                  ) : (
                    <FaCheck className="text-gray-400 inline" />
                  )}
                </span>
              )}
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gray-100 py-12">
        <div className="max-w-7xl mx-auto px-6">
          <h1 className="text-3xl font-bold text-gray-800 mb-8 text-center">Chat Panel</h1>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            {/* Contacts List (keep your existing contacts list code) */}

            {/* Chat Section */}
            <div className="bg-white shadow-lg rounded-lg p-6 lg:col-span-2 flex flex-col" style={{ height: '600px' }}>
              {selectedContact ? (
                <>
                  <div className="flex items-center justify-between mb-6 pb-4 border-b">
                    <div className="flex items-center">
                      <img 
                        src={selectedContact.avatar} 
                        alt={selectedContact.name} 
                        className="w-12 h-12 rounded-full mr-4" 
                      />
                      <div>
                        <h2 className="text-xl font-semibold text-gray-800 flex items-center">
                          {selectedContact.name}
                          <FaCircle className={`ml-2 text-xs ${selectedContact.online ? 'text-green-500' : 'text-gray-400'}`} />
                        </h2>
                        <p className="text-sm text-gray-500">
                          {selectedContact.online ? 'Online' : 'Offline'}
                        </p>
                      </div>
                    </div>
                    <div className="relative">
                      <FaEllipsisV 
                        className="text-gray-500 cursor-pointer hover:text-gray-700" 
                        onClick={toggleMenu} 
                      />
                      {menuOpen && (
                        <div className="absolute right-0 mt-2 w-40 bg-white border border-gray-200 rounded-lg shadow-lg z-10">
                          <ul className="text-sm text-gray-700">
                            <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">Archive</li>
                            <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">Delete</li>
                            <li className="px-4 py-2 hover:bg-gray-100 cursor-pointer">Pin to Bar</li>
                          </ul>
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="flex-1 overflow-y-auto p-4 mb-4">
                    {Object.entries(groupMessagesByDate(getContactMessages(selectedContact.id))).map(([date, dateMessages]) => (
                      <div key={date} className="mb-6">
                        <div className="text-center text-xs text-gray-500 mb-4">
                          {date}
                        </div>
                        {dateMessages.map(renderMessage)}
                      </div>
                    ))}
                    <div ref={messagesEndRef} />
                  </div>

                  <div className="mt-auto pt-4 border-t">
                    <div className="flex items-center space-x-3">
                      <textarea
                        rows="2"
                        value={inputMessage}
                        onChange={(e) => setInputMessage(e.target.value)}
                        placeholder={`Message ${selectedContact.name}...`}
                        className="flex-1 p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 resize-none"
                        onKeyPress={(e) => e.key === 'Enter' && !e.shiftKey && handleSendMessage()}
                      />
                      <button 
                        onClick={handleSendMessage}
                        className="bg-blue-500 hover:bg-blue-600 text-white py-3 px-5 rounded-lg transition duration-300 flex items-center"
                      >
                        <FaReply className="mr-2" /> Send
                      </button>
                    </div>
                  </div>
                </>
              ) : (
                <div className="text-center flex-1 flex items-center justify-center">
                  <FaUserCircle className="text-gray-300 text-6xl mb-4" />
                  <p className="text-gray-500">Select a contact to start chatting.</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
};

export default ChatPanel;